#define MAX_VERTICES_PER_STRAND 16

precision highp float;

uniform mat4 modelMatrix;
uniform int verticesPerStrand;
uniform float timeStep;
uniform float globalConstraint;
uniform float localConstraint;
uniform float friction;
uniform vec3 gravityForce;
uniform int lenConstraintIter;
uniform int localConstraintIter;
uniform mat4 windVecs;

shared vec4 sharedPositions[MAX_VERTICES_PER_STRAND];

layout(local_size_x = 1, local_size_y = MAX_VERTICES_PER_STRAND, local_size_z = 1) in;


layout(std430, binding = REST_POSITIONS_BUFFER_BINDING) buffer RestPositions
{
    vec4 data[];
} restPos;

layout(std430, binding = POSITIONS_BUFFER_BINDING) buffer Positions
{
    vec4 data[];
} pos;

layout(std430, binding = PREVIOUS_POSITIONS_BUFFER_BINDING) buffer PreviousPositions
{
    vec4 data[];
} prevPos;

layout(std430, binding = TANGENTS_DISTANCES_BINDING) buffer TangentsDistances
{
    vec4 data[];
} tangents;

layout(std430, binding = REF_VECTORS_BINDING) buffer RefVectors
{
    vec4 data[];
} refVectors;

layout(std430, binding = GLOBAL_ROTATIONS_BINDING) buffer GlobalRotations
{
    vec4 data[];
} globalRotations;


vec3 windForce(int localID, int globalID) {
    vec3 wind0 = windVecs[0].xyz;
	if(length(wind0) == 0 || localID < 2 || localID >= verticesPerStrand - 1) {
	    return vec3(0.0, 0.0, 0.0);
	}
	float a = (globalID % 20) / 20.0f;
	vec3 w = a * wind0 + (1.0 - a) * windVecs[1].xyz + a * windVecs[2].xyz + (1.0 - a) * windVecs[3].xyz;
	vec3 tangent = normalize(sharedPositions[localID].xyz - sharedPositions[localID + 1].xyz);
	vec3 windForce = cross(cross(tangent, w), tangent);
	return windForce;
}


bool canMove(vec4 position)
{
    return position.w > 0;
}


vec2 checkMove(vec4 p0, vec4 p1)
{
    if(canMove(p0)) {
	    return canMove(p1) ? vec2(0.5, 0.5) : vec2(1.0, 0.0);
	}
	else {
	    return canMove(p1) ? vec2(0.0, 1.0) : vec2(0.0, 0.0);
	}
}

vec4 inverseQuaternion(vec4 quaternion)
{
    float lengthSqr = quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z + quaternion.w * quaternion.w;
	if(lengthSqr < 0.001) {
	    return vec4(0, 0, 0, 1.0f);
	}

	quaternion.x = -quaternion.x / lengthSqr;
	quaternion.y = -quaternion.y / lengthSqr;
	quaternion.z = -quaternion.z / lengthSqr;
	quaternion.w = quaternion.w / lengthSqr;

	return quaternion;
}

vec4 makeQuaternion(float angle, vec3 axis)
{
    vec4 quaternion = vec4(0.0, 0.0, 0.0, 0.0);
	float halfAngle = angle * 0.5f;
	quaternion.w = cos(halfAngle);
	quaternion.xyz = axis * sin(halfAngle);
	return quaternion;
}

vec4 multQuaternionAndQuaternion(vec4 qA, vec4 qB)
{
    vec4 q;

    q.w = qA.w * qB.w - qA.x * qB.x - qA.y * qB.y - qA.z * qB.z;
    q.x = qA.w * qB.x + qA.x * qB.w + qA.y * qB.z - qA.z * qB.y;
    q.y = qA.w * qB.y + qA.y * qB.w + qA.z * qB.x - qA.x * qB.z;
    q.z = qA.w * qB.z + qA.z * qB.w + qA.x * qB.y - qA.y * qB.x;

    return q;
}

vec3 multQuaternionAndVector(vec4 q, vec3 v)
{
    vec3 qvec = q.xyz;
    vec3 uv = cross(qvec, v);
    vec3 uuv = cross(qvec, uv);
    uv *= (2.0f * q.w);
    uuv *= 2.0f;

    return v + uv + uuv;
}



void changePosData(vec4 prevPosVec, vec4 newPosVec, int globalVertexIndex)
{
    pos.data[globalVertexIndex] = newPosVec;
	prevPos.data[globalVertexIndex] = prevPosVec;
}

vec4 verletIntegration(vec4 currPos, vec4 prevPosVec, vec3 force, float frictionCoef)
{
    vec4 outputPos = currPos;
	outputPos.xyz = currPos.xyz + (1.0 - frictionCoef) * (currPos.xyz - prevPosVec.xyz) + force * timeStep * timeStep;
	return outputPos;
}

void distConstraint(int index0, int index1, float targetDistance)
{
    vec4 p0 = sharedPositions[index0];
	vec4 p1 = sharedPositions[index1];

	vec3 deltaVec = p1.xyz - p0.xyz;
	float distance = max(length(deltaVec), 1e-7);
	float stretching = 1 - targetDistance / distance;
	deltaVec = deltaVec * stretching;
	vec2 multiplier = checkMove(p0, p1);

	sharedPositions[index0].xyz += multiplier[0] * deltaVec;
	sharedPositions[index1].xyz -= multiplier[1] * deltaVec;
}



void main()
{
    int globalID = int(gl_GlobalInvocationID.x);
	int localID = int(gl_LocalInvocationID.y);

	if(localID >= verticesPerStrand) {
	    return;
	}

	int globalRootVertexIndex = globalID * (verticesPerStrand);
	int globalVertexIndex = globalRootVertexIndex + localID;

	vec4 tangents = tangents.data[globalVertexIndex];
	vec4 prevPosVec = prevPos.data[globalVertexIndex];
	vec4 currPos = pos.data[globalVertexIndex];
	vec4 initPos = restPos.data[globalVertexIndex];

	sharedPositions[localID] = currPos;
	barrier();

	if(canMove(currPos)) {
	    vec3 force = gravityForce + windForce(localID, globalID);
	    sharedPositions[localID] = verletIntegration(currPos, prevPosVec, force, friction);
	}

	vec3 deltaVec = globalConstraint * (initPos - sharedPositions[localID]).xyz;
	sharedPositions[localID].xyz += deltaVec;
	barrier();

	if(localID == 0) {
	    for(int i = 0; i < localConstraintIter; i++) {
		    vec4 position = sharedPositions[1];
			vec4 globalRotation = globalRotations.data[globalRootVertexIndex];

			for(int localVertexIndex = 1; localVertexIndex < verticesPerStrand - 1; localVertexIndex++) {
			    vec4 posNext = sharedPositions[localVertexIndex + 1];
				vec3 localPosNext = refVectors.data[globalRootVertexIndex + localVertexIndex + 1].xyz;
				vec3 originalPosNext = multQuaternionAndVector(globalRotation, localPosNext) + position.xyz;

				vec3 localDelta = localConstraint * (originalPosNext - posNext.xyz);

				if(canMove(position)) {
				    position.xyz -= localDelta;
				}

				if(canMove(posNext)) {
				    posNext.xyz += localDelta;
				}

				vec4 globalRotationInv = inverseQuaternion(globalRotation);
				vec3 tangent = normalize(posNext.xyz - position.xyz);
				vec3 localTangent = normalize(multQuaternionAndVector(globalRotationInv, tangent));
				vec3 axisX = vec3(1.0, 0, 0);
				vec3 rotAxis = cross(axisX, localTangent);
				float angle = acos(dot(axisX, localTangent));

				if(length(rotAxis) > 0.001 && abs(angle) > 0.001) {
					rotAxis = normalize(rotAxis);
					vec4 localRotation = makeQuaternion(angle, rotAxis);
					globalRotation = multQuaternionAndQuaternion(globalRotation, localRotation);
				}

				sharedPositions[localVertexIndex].xyz = position.xyz;
				sharedPositions[localVertexIndex + 1].xyz = posNext.xyz;
				position = posNext;
			}
	    } 
	}
	barrier();

	for(int i = 0; i < lenConstraintIter; i++) {

	    if(localID % 2 == 0 && localID < verticesPerStrand - 1) {
		    distConstraint(localID, localID + 1, tangents.w);
		}

		barrier();

		if(localID % 2 == 1 && localID < verticesPerStrand - 1) {
		    distConstraint(localID, localID + 1, tangents.w);
		}

		barrier();
	}

	changePosData(currPos, sharedPositions[localID], globalVertexIndex);
}